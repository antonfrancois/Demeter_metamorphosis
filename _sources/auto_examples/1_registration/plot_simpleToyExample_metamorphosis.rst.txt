
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/1_registration/plot_simpleToyExample_metamorphosis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_1_registration_plot_simpleToyExample_metamorphosis.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_1_registration_plot_simpleToyExample_metamorphosis.py:


.. _simpleToyExample_metamorphosis:

This is an informative docstring

MetaMorphosis behaviour with different values of rho
===================================================

.. GENERATED FROM PYTHON SOURCE LINES 10-22

.. code-block:: Python


    try:
        import sys, os
        # add the parent directory to the path
        base_path  = os.path.join(os.path.dirname(os.path.abspath(__file__)),'..')
        sys.path.insert(0,base_path)
        import __init__

    except NameError:
        pass









.. GENERATED FROM PYTHON SOURCE LINES 23-24

Import the necessary packages

.. GENERATED FROM PYTHON SOURCE LINES 24-38

.. code-block:: Python


    import torch
    # import kornia.filters as flt
    import matplotlib.pyplot as plt
    from demeter import DLT_KW_IMAGE,GRIDDEF_YELLOW, ROOT_DIRECTORY
    # import demeter as dm
    # %load_ext autoreload
    # %autoreload 2
    import demeter.utils.reproducing_kernels as rk
    import demeter.metamorphosis as mt
    import demeter.utils.torchbox as tb










.. GENERATED FROM PYTHON SOURCE LINES 39-44

Open and visualise images before registration. The source and target are 'C' shapes.
The source is a 'C' shape that is deformed. The target is a 'C' shape that was
cut in half changing its topology and a point was added. The goal is to register
the source to the target by deforming the 'C' shape and accounting the cut
and the point as intensity additions.

.. GENERATED FROM PYTHON SOURCE LINES 44-61

.. code-block:: Python

    print("ROOT_DIRECTORY : ",ROOT_DIRECTORY)
    source_name,target_name = 'm0t', 'm1c'
    # source_name,target_name = '17','20'
    size = (300,300)

    S = tb.reg_open(source_name,size = size)
    T = tb.reg_open(target_name,size = size)

    fig, ax = plt.subplots(1,3,figsize=(10,5))
    ax[0].imshow(S[0,0],**DLT_KW_IMAGE)
    ax[0].set_title('source')
    ax[1].imshow(T[0,0],**DLT_KW_IMAGE)
    ax[1].set_title('target')
    ax[2].imshow(tb.imCmp(S,T,'seg'),origin='lower')
    ax[2].set_title('superposition of S and T')
    plt.show()




.. image-sg:: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_001.png
   :alt: source, target, superposition of S and T
   :srcset: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ROOT_DIRECTORY :  /home/runner/work/Demeter_metamorphosis/Demeter_metamorphosis




.. GENERATED FROM PYTHON SOURCE LINES 62-72

Before choosing the optimisation method, we need to define a
reproducing kernel and choose a good sigma. The simpler reproducing
kernel is the Gaussian kernel. To choose the sigma, we can use the
helper functions. `get_sigma_from_img_ratio` and `plot_kernel_on_image`.
The first one will compute a good sigma to match the level of details desired.
A big sigma will produce a smoother deformation field that will register better
big structures. A smaller sigma will register better small details. The subdivisions
is basically in how many parts we want to divide the image to get the size
of wanted details. The second function will plot the kernel on the image to
help us validate our choice of sigma.

.. GENERATED FROM PYTHON SOURCE LINES 72-82

.. code-block:: Python


    image_subdivisions = 10
    sigma = rk.get_sigma_from_img_ratio(T.shape,subdiv = image_subdivisions)

    kernelOperator = rk.GaussianRKHS(sigma,kernel_reach=7)

    rk.plot_kernel_on_image(kernelOperator,image= T,subdiv=image_subdivisions)
    plt.show()





.. image-sg:: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_002.png
   :alt: sigma = (32.189490394340204, 32.189490394340204), subdiv = 10
   :srcset: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    kernel shape: torch.Size([1, 225, 225])
    kernel shape: 225 225
    /opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/torch/functional.py:513: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3609.)
      return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
    x, y torch.Size([225, 225]) torch.Size([225, 225])




.. GENERATED FROM PYTHON SOURCE LINES 83-84

Perform a first Metamorphosis registration

.. GENERATED FROM PYTHON SOURCE LINES 84-111

.. code-block:: Python

    if torch.cuda.is_available():
        device = 'cuda:0'
    else:
        device = 'cpu'
    S = S.to(device)
    T = T.to(device)
    dx_convention = 'square'
    # dx_convention = 'pixel'

    rho = .1
    #
    # data_cost = mt.Ssd_normalized(T)
    data_cost = mt.Ssd(T)

    mr = mt.metamorphosis(S,T,0,
                          rho,
                          cost_cst=.001,
                          kernelOperator=kernelOperator,
                          integration_steps=10,
                          n_iter=15,
                          grad_coef=1,
                          dx_convention=dx_convention,
                        data_term=data_cost,
                        hamiltonian_integration=True
                          )

    # mr.save('simpleToyExample_test',light_save = True)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Progress: [#---------]  13.33%  (Ssd : ,1266.3970).    Progress: [##--------]  20.00%  (Ssd : ,394.8731).    Progress: [###-------]  26.67%  (Ssd : ,228.5141).    Progress: [###-------]  33.33%  (Ssd : ,163.6883).    Progress: [####------]  40.00%  (Ssd : ,130.7267).    Progress: [#####-----]  46.67%  (Ssd : ,114.5429).    Progress: [#####-----]  53.33%  (Ssd : ,102.1567).    Progress: [######----]  60.00%  (Ssd : , 95.3597).    Progress: [#######---]  66.67%  (Ssd : , 89.5801).    Progress: [#######---]  73.33%  (Ssd : , 86.4610).    Progress: [########--]  80.00%  (Ssd : , 79.0536).    Progress: [#########-]  86.67%  (Ssd : , 75.5419).    Progress: [#########-]  93.33%  (Ssd : , 72.8030).    Progress: [##########] 100.00% Done...
     (Ssd : , 68.7999).
    Computation of forward done in  0:01:44s and 0.555cents  s

    Computation of metamorphosis done in  0:01:44s and 0.556cents  s




.. GENERATED FROM PYTHON SOURCE LINES 112-116

.. code-block:: Python

    mr.plot()
    mr.plot_deform()
    mr.mp.plot()
    plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_003.png
         :alt: Lambda = 0.001 rho = 0.1
         :srcset: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_004.png
         :alt: source, target, Integrated source image, comparaison deformed image with target
         :srcset: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_005.png
         :alt: diffeo = tensor(True)
         :srcset: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_006.png
         :alt: t = 0.0, diffeo = tensor(True), t = 0.2, diffeo = tensor(True), t = 0.4, diffeo = tensor(True), t = 0.7, diffeo = tensor(True), t = 1.0, diffeo = tensor(True)
         :srcset: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-0.4122110605239868..1.2817898988723755].




.. GENERATED FROM PYTHON SOURCE LINES 117-123

####################################################################
 We will test different values of rho to see how the registration behaves
 with different values of rho. To save you time I already computed the
 optimisation for the values of rho in the files listed in list_optim.
 Feel free to try yourselves If you want to recompute them by setting
 recompute to True. The number of rho to test is set by n_plot.

.. GENERATED FROM PYTHON SOURCE LINES 123-169

.. code-block:: Python

    list_optim = [
        "2D_23_01_2025_simpleToyExample_rho_0.00_000.pk1",
        "2D_23_01_2025_simpleToyExample_rho_0.11_000.pk1",
        "2D_23_01_2025_simpleToyExample_rho_0.22_000.pk1",
        "2D_23_01_2025_simpleToyExample_rho_0.33_000.pk1",
        "2D_23_01_2025_simpleToyExample_rho_0.44_000.pk1",
        "2D_23_01_2025_simpleToyExample_rho_0.56_000.pk1",
        "2D_23_01_2025_simpleToyExample_rho_0.67_000.pk1",
        "2D_23_01_2025_simpleToyExample_rho_0.78_000.pk1",
        "2D_23_01_2025_simpleToyExample_rho_0.89_000.pk1",
        "2D_23_01_2025_simpleToyExample_rho_1.00_000.pk1",
    ]
    recompute = False
    n_plot = 10
    rho_list = torch.linspace(0,1,n_plot)

    fig,ax = plt.subplots(2,n_plot,figsize=(20,5))

    for i,rho in enumerate(rho_list):
        print(f'\nrho = {rho}, {i+1}/{n_plot}')
        if recompute:
            mr = mt.metamorphosis(S,T,0,
                              rho,
                              cost_cst=.001,
                              kernelOperator=kernelOperator,
                              integration_steps=10,
                              n_iter=30,
                              grad_coef=.1,
                              dx_convention=dx_convention,
                              data_term=data_cost,
                              hamiltonian_integration=True
                              )
            mr.save(f'simpleToyExample_rho_{rho:.2f}',light_save = True)
        else:
            mr = mt.load_optimize_geodesicShooting(list_optim[i])

        # mr.plot_cost()
        ax[0,i].set_title(f'rho = {rho:.2f}')
        ax[0,i].imshow(mr.mp.image[0,0].detach().cpu(),**DLT_KW_IMAGE)
        deform = mr.mp.get_deformator()
        img_deform = tb.imgDeform(S.cpu(),deform,dx_convention=dx_convention)
        ax[1,i].imshow(img_deform[0,0].detach().cpu(),**DLT_KW_IMAGE)


    plt.show()

    # sphinx_gallery_thumbnail_number = 6


.. image-sg:: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_007.png
   :alt: rho = 0.00, rho = 0.11, rho = 0.22, rho = 0.33, rho = 0.44, rho = 0.56, rho = 0.67, rho = 0.78, rho = 0.89, rho = 1.00
   :srcset: /auto_examples/1_registration/images/sphx_glr_plot_simpleToyExample_metamorphosis_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    rho = 0.0, 1/10
    DT: None
    New optimiser loaded (2D_23_01_2025_simpleToyExample_rho_0.00_000.pk1) :
     Metamorphosis_Shooting(cost_parameters : {, 
                    rho =0.0, 
                    lambda =0.001
            },
            geodesic integrator : Metamorphosis_integrator(
      (kernelOperator): GaussianRKHS,2D 
            filter :fft_filter, sigma :(32.189490394340204, 32.189490394340204)
            kernel_size :(1, 225, 225)
    )
            integration method : _step_full_semiLagrangian
            optimisation method : LBFGS_torch
            # geodesic steps =10
    )

    rho = 0.1111111119389534, 2/10
    DT: None
    New optimiser loaded (2D_23_01_2025_simpleToyExample_rho_0.11_000.pk1) :
     Metamorphosis_Shooting(cost_parameters : {, 
                    rho =0.1111111119389534, 
                    lambda =0.001
            },
            geodesic integrator : Metamorphosis_integrator(
      (kernelOperator): GaussianRKHS,2D 
            filter :fft_filter, sigma :(32.189490394340204, 32.189490394340204)
            kernel_size :(1, 225, 225)
    )
            integration method : _step_full_semiLagrangian
            optimisation method : LBFGS_torch
            # geodesic steps =10
    )

    rho = 0.2222222238779068, 3/10
    DT: None
    New optimiser loaded (2D_23_01_2025_simpleToyExample_rho_0.22_000.pk1) :
     Metamorphosis_Shooting(cost_parameters : {, 
                    rho =0.2222222238779068, 
                    lambda =0.001
            },
            geodesic integrator : Metamorphosis_integrator(
      (kernelOperator): GaussianRKHS,2D 
            filter :fft_filter, sigma :(32.189490394340204, 32.189490394340204)
            kernel_size :(1, 225, 225)
    )
            integration method : _step_full_semiLagrangian
            optimisation method : LBFGS_torch
            # geodesic steps =10
    )

    rho = 0.3333333432674408, 4/10
    DT: None
    New optimiser loaded (2D_23_01_2025_simpleToyExample_rho_0.33_000.pk1) :
     Metamorphosis_Shooting(cost_parameters : {, 
                    rho =0.3333333432674408, 
                    lambda =0.001
            },
            geodesic integrator : Metamorphosis_integrator(
      (kernelOperator): GaussianRKHS,2D 
            filter :fft_filter, sigma :(32.189490394340204, 32.189490394340204)
            kernel_size :(1, 225, 225)
    )
            integration method : _step_full_semiLagrangian
            optimisation method : LBFGS_torch
            # geodesic steps =10
    )

    rho = 0.4444444477558136, 5/10
    DT: None
    New optimiser loaded (2D_23_01_2025_simpleToyExample_rho_0.44_000.pk1) :
     Metamorphosis_Shooting(cost_parameters : {, 
                    rho =0.4444444477558136, 
                    lambda =0.001
            },
            geodesic integrator : Metamorphosis_integrator(
      (kernelOperator): GaussianRKHS,2D 
            filter :fft_filter, sigma :(32.189490394340204, 32.189490394340204)
            kernel_size :(1, 225, 225)
    )
            integration method : _step_full_semiLagrangian
            optimisation method : LBFGS_torch
            # geodesic steps =10
    )

    rho = 0.5555555820465088, 6/10
    DT: None
    New optimiser loaded (2D_23_01_2025_simpleToyExample_rho_0.56_000.pk1) :
     Metamorphosis_Shooting(cost_parameters : {, 
                    rho =0.5555555820465088, 
                    lambda =0.001
            },
            geodesic integrator : Metamorphosis_integrator(
      (kernelOperator): GaussianRKHS,2D 
            filter :fft_filter, sigma :(32.189490394340204, 32.189490394340204)
            kernel_size :(1, 225, 225)
    )
            integration method : _step_full_semiLagrangian
            optimisation method : LBFGS_torch
            # geodesic steps =10
    )

    rho = 0.6666666865348816, 7/10
    DT: None
    New optimiser loaded (2D_23_01_2025_simpleToyExample_rho_0.67_000.pk1) :
     Metamorphosis_Shooting(cost_parameters : {, 
                    rho =0.6666666865348816, 
                    lambda =0.001
            },
            geodesic integrator : Metamorphosis_integrator(
      (kernelOperator): GaussianRKHS,2D 
            filter :fft_filter, sigma :(32.189490394340204, 32.189490394340204)
            kernel_size :(1, 225, 225)
    )
            integration method : _step_full_semiLagrangian
            optimisation method : LBFGS_torch
            # geodesic steps =10
    )

    rho = 0.7777777910232544, 8/10
    DT: None
    New optimiser loaded (2D_23_01_2025_simpleToyExample_rho_0.78_000.pk1) :
     Metamorphosis_Shooting(cost_parameters : {, 
                    rho =0.7777777910232544, 
                    lambda =0.001
            },
            geodesic integrator : Metamorphosis_integrator(
      (kernelOperator): GaussianRKHS,2D 
            filter :fft_filter, sigma :(32.189490394340204, 32.189490394340204)
            kernel_size :(1, 225, 225)
    )
            integration method : _step_full_semiLagrangian
            optimisation method : LBFGS_torch
            # geodesic steps =10
    )

    rho = 0.8888888955116272, 9/10
    DT: None
    New optimiser loaded (2D_23_01_2025_simpleToyExample_rho_0.89_000.pk1) :
     Metamorphosis_Shooting(cost_parameters : {, 
                    rho =0.8888888955116272, 
                    lambda =0.001
            },
            geodesic integrator : Metamorphosis_integrator(
      (kernelOperator): GaussianRKHS,2D 
            filter :fft_filter, sigma :(32.189490394340204, 32.189490394340204)
            kernel_size :(1, 225, 225)
    )
            integration method : _step_full_semiLagrangian
            optimisation method : LBFGS_torch
            # geodesic steps =10
    )

    rho = 1.0, 10/10
    DT: None
    New optimiser loaded (2D_23_01_2025_simpleToyExample_rho_1.00_000.pk1) :
     Metamorphosis_Shooting(cost_parameters : {, 
                    rho =1.0, 
                    lambda =0.001
            },
            geodesic integrator : Metamorphosis_integrator(
      (kernelOperator): GaussianRKHS,2D 
            filter :fft_filter, sigma :(32.189490394340204, 32.189490394340204)
            kernel_size :(1, 225, 225)
    )
            integration method : _step_full_semiLagrangian
            optimisation method : LBFGS_torch
            # geodesic steps =10
    )





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 49.475 seconds)


.. _sphx_glr_download_auto_examples_1_registration_plot_simpleToyExample_metamorphosis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_simpleToyExample_metamorphosis.ipynb <plot_simpleToyExample_metamorphosis.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_simpleToyExample_metamorphosis.py <plot_simpleToyExample_metamorphosis.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_simpleToyExample_metamorphosis.zip <plot_simpleToyExample_metamorphosis.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
